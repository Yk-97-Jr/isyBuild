openapi: 3.0.3
info:
  title: IsyBuild API
  version: 1.0.0
  description: API documentation for IsyBuild
paths:
  /Subcontractors/{subcontractor_id}/owner/delete/:
    delete:
      operationId: Subcontractors_owner_delete_destroy
      description: Deletes an Subcontractor owner by ID. Requires administrative privileges.
      summary: Delete Subcontractor owner
      parameters:
      - in: path
        name: subcontractor_id
        schema:
          type: integer
        required: true
      tags:
      - Subcontractor Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: Subcontractor deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Subcontractor not found.
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied.
          description: ''
  /admin-staff/:
    get:
      operationId: admin_staff_retrieve
      description: Retrieve a list of all admin staff users with pagination.
      summary: List all admin staff
      parameters:
      - in: query
        name: created_by__email
        schema:
          type: string
        description: Filter by created by email (contains match)
      - in: query
        name: is_active
        schema:
          type: boolean
        description: Filter by active status (True or False)
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -created_at
          - -created_by__email
          - -id
          - -user__date_joined
          - -user__email
          - -user__first_name
          - -user__is_active
          - -user__last_name
          - created_at
          - created_by__email
          - id
          - user__date_joined
          - user__email
          - user__first_name
          - user__is_active
          - user__last_name
        description: Comma-separated fields to order by (e.g., 'name', '-date_joined')
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: query
        name: search
        schema:
          type: string
        description: Search by first name, last name, or email
      - in: query
        name: user__email
        schema:
          type: string
        description: Filter by email (contains match)
      - in: query
        name: user__first_name
        schema:
          type: string
        description: Filter by first name (contains match)
      - in: query
        name: user__last_name
        schema:
          type: string
        description: Filter by last name (contains match)
      tags:
      - Admin Staff Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAdminStaff'
          description: ''
  /admin-staff/{admin_user_id}/:
    get:
      operationId: admin_staff_retrieve_2
      description: Fetches detailed information about an admin staff member by their
        unique identifier.
      summary: Retrieve Admin Staff Details
      parameters:
      - in: path
        name: admin_user_id
        schema:
          type: integer
        required: true
      tags:
      - Admin Staff Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminStaff'
          description: ''
  /admin-staff/create/:
    post:
      operationId: admin_staff_create_create
      description: Create a new admin staff member.
      tags:
      - Admin Staff Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminStaffCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdminStaffCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdminStaffCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminStaff'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /admin-staff/update/{admin_user_id}/:
    patch:
      operationId: admin_staff_update_partial_update
      description: Updates information for an existing admin staff member.
      summary: Update Admin Staff Member
      parameters:
      - in: path
        name: admin_user_id
        schema:
          type: integer
        required: true
      tags:
      - Admin Staff Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAdminStaffUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAdminStaffUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAdminStaffUpdateRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminStaff'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /admin-users/delete/{admin_user_id}/:
    delete:
      operationId: admin_users_delete_destroy
      description: Deletes an admin user by ID. Requires administrative privileges.
      summary: Delete Admin User
      parameters:
      - in: path
        name: admin_user_id
        schema:
          type: integer
        required: true
      tags:
      - Admin Staff Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: User deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: User not found.
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied.
          description: ''
  /categories/:
    get:
      operationId: categories_list
      description: Retrieve a list of all the categories with pagination.
      summary: List all the categories.
      parameters:
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (contains match)
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -created_at
          - -created_by__email
          - -description
          - -id
          - -name
          - created_at
          - created_by__email
          - description
          - id
          - name
        description: Order results by fields (e.g., 'name', '-created_at')
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: query
        name: search
        schema:
          type: string
        description: Search by category name, or description
      tags:
      - Product Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategory'
          description: ''
  /categories/{category_id}/:
    get:
      operationId: categories_retrieve
      description: Fetches detailed information about a category by their ID.
      summary: Retrieve category Details
      parameters:
      - in: path
        name: category_id
        schema:
          type: integer
        required: true
      tags:
      - Product Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /categories/{category_id}/delete/:
    delete:
      operationId: category_delete
      description: Deletes a Category by ID. Requires administrative privileges.
      summary: Delete Category
      parameters:
      - in: path
        name: category_id
        schema:
          type: integer
        required: true
      tags:
      - Product Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: Category deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Category not found.
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied.
          description: ''
  /categories/{category_id}/update/:
    put:
      operationId: category_update
      description: Updates informations for an existing category .
      summary: Update category
      parameters:
      - in: path
        name: category_id
        schema:
          type: integer
        required: true
      tags:
      - Product Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /categories/create/:
    post:
      operationId: category_create
      description: Create a new category.
      tags:
      - Product Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /clients/:
    get:
      operationId: clients_retrieve
      description: Retrieve a list of all client with pagination.
      summary: List all Client
      parameters:
      - in: query
        name: contact_email
        schema:
          type: string
        description: Filter by contact email (contains match)
      - in: query
        name: created_by__email
        schema:
          type: string
        description: Filter by the email of the creator
      - in: query
        name: is_active
        schema:
          type: boolean
        description: Filter by active status (True or False)
      - in: query
        name: name
        schema:
          type: string
        description: Filter by client name (contains match)
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -contact_email
          - -created_at
          - -created_by__email
          - -id
          - -is_active
          - -name
          - -owner__email
          - -phone_number
          - -siren_number
          - contact_email
          - created_at
          - created_by__email
          - id
          - is_active
          - name
          - owner__email
          - phone_number
          - siren_number
        description: Comma-separated fields to order by (e.g., 'name', '-date_joined')
      - in: query
        name: owner__email
        schema:
          type: string
        description: Filter by the owner's email
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: query
        name: phone_number
        schema:
          type: string
        description: Filter by phone number (contains match)
      - in: query
        name: search
        schema:
          type: string
        description: Search by client name, email, or phone number
      - in: query
        name: siren_number
        schema:
          type: string
        description: Filter by SIREN number (contains match)
      tags:
      - Client Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedClient'
          description: ''
  /clients/{client_id}/:
    get:
      operationId: clients_retrieve_2
      description: Fetches detailed information about an client member by their unique
        identifier.
      summary: Retrieve client Details
      parameters:
      - in: path
        name: client_id
        schema:
          type: integer
        required: true
      tags:
      - Client Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
          description: ''
  /clients/{client_id}/owner/:
    get:
      operationId: clients_owner_retrieve
      description: Fetches the owner details of a client by the client's ID.
      summary: Retrieve Client Owner Details
      parameters:
      - in: path
        name: client_id
        schema:
          type: integer
        required: true
      tags:
      - Client Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /clients/{client_id}/owner/assign/:
    put:
      operationId: clients_owner_assign_update
      description: Assigns an owner to a client by setting a user as the owner.
      summary: Assign Owner to Client
      parameters:
      - in: path
        name: client_id
        schema:
          type: integer
        required: true
      tags:
      - Client Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientOwnerCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClientOwnerCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ClientOwnerCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /clients/{client_id}/owner/delete/:
    delete:
      operationId: clients_owner_delete_destroy
      description: Deletes an client owner by ID. Requires administrative privileges.
      summary: Delete Client owner
      parameters:
      - in: path
        name: client_id
        schema:
          type: integer
        required: true
      tags:
      - Client Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: client deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: client not found.
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied.
          description: ''
  /clients/{client_id}/owner/update/:
    put:
      operationId: clients_owner_update_update
      description: Update an owner to a client by setting a user as the owner.
      summary: Update Owner to Client
      parameters:
      - in: path
        name: client_id
        schema:
          type: integer
        required: true
      tags:
      - Client Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientOwnerUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClientOwnerUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ClientOwnerUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /clients/{client_id}/staff/:
    get:
      operationId: clients_staff_retrieve_3
      description: Retrieve a list of all client staff users with pagination.
      summary: List all Client staff
      parameters:
      - in: path
        name: client_id
        schema:
          type: integer
        required: true
      - in: query
        name: created_by
        schema:
          type: string
        description: Filter by created by email (contains match)
      - in: query
        name: email
        schema:
          type: string
        description: Filter by email (contains match)
      - in: query
        name: first_name
        schema:
          type: string
        description: Filter by first name (contains match)
      - in: query
        name: last_name
        schema:
          type: string
        description: Filter by last name (contains match)
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -created_at
          - -created_by__email
          - -id
          - -user__date_joined
          - -user__email
          - -user__first_name
          - -user__is_active
          - -user__last_name
          - created_at
          - created_by__email
          - id
          - user__date_joined
          - user__email
          - user__first_name
          - user__is_active
          - user__last_name
        description: Comma-separated fields to order by (e.g., 'name', '-date_joined')
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: query
        name: search
        schema:
          type: string
        description: Search by first name, last name, or email
      tags:
      - Client Staff Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedClientStaff'
          description: ''
  /clients/{client_id}/staff/create/:
    post:
      operationId: clients_staff_create_create_2
      description: Create a new client staff member.
      parameters:
      - in: path
        name: client_id
        schema:
          type: integer
        required: true
      tags:
      - Client Staff Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientStaffCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClientStaffCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ClientStaffCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientStaff'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /clients/create/:
    post:
      operationId: clients_create_create
      description: Create a new client .
      tags:
      - Client Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClientCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ClientCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /clients/delete/{client_id}/:
    delete:
      operationId: clients_delete_destroy
      description: Deletes an client by ID. Requires administrative privileges.
      summary: Delete Client
      parameters:
      - in: path
        name: client_id
        schema:
          type: integer
        required: true
      tags:
      - Client Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: client deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: client not found.
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied.
          description: ''
  /clients/staff/:
    get:
      operationId: clients_staff_retrieve
      description: Retrieve a list of all client staff users with pagination.
      summary: List all Client staff
      parameters:
      - in: query
        name: created_by
        schema:
          type: string
        description: Filter by created by email (contains match)
      - in: query
        name: email
        schema:
          type: string
        description: Filter by email (contains match)
      - in: query
        name: first_name
        schema:
          type: string
        description: Filter by first name (contains match)
      - in: query
        name: last_name
        schema:
          type: string
        description: Filter by last name (contains match)
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -created_at
          - -created_by__email
          - -id
          - -user__date_joined
          - -user__email
          - -user__first_name
          - -user__is_active
          - -user__last_name
          - created_at
          - created_by__email
          - id
          - user__date_joined
          - user__email
          - user__first_name
          - user__is_active
          - user__last_name
        description: Comma-separated fields to order by (e.g., 'name', '-date_joined')
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: query
        name: search
        schema:
          type: string
        description: Search by first name, last name, or email
      tags:
      - Client Staff Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedClientStaff'
          description: ''
  /clients/staff/{client_staff_id}/:
    get:
      operationId: clients_staff_retrieve_2
      description: Fetches detailed information about an  client staff member by their
        unique identifier.
      summary: Retrieve  Client Staff Details
      parameters:
      - in: path
        name: client_staff_id
        schema:
          type: integer
        required: true
      tags:
      - Client Staff Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientStaff'
          description: ''
  /clients/staff/{client_staff_id}/delete/:
    delete:
      operationId: clients_staff_delete_destroy
      description: Deletes an client user by ID. Requires administrative privileges.
      summary: Delete Client Staff
      parameters:
      - in: path
        name: client_staff_id
        schema:
          type: integer
        required: true
      tags:
      - Client Staff Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: User deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: User not found.
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied.
          description: ''
  /clients/staff/{client_staff_id}/update/:
    put:
      operationId: clients_staff_update_update
      description: Updates information for an existing  client staff member.
      summary: Update  Client Staff Member
      parameters:
      - in: path
        name: client_staff_id
        schema:
          type: integer
        required: true
      tags:
      - Client Staff Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientStaffUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClientStaffUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ClientStaffUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientStaff'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /clients/staff/create/:
    post:
      operationId: clients_staff_create_create
      description: Create a new client staff member.
      tags:
      - Client Staff Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientStaffCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClientStaffCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ClientStaffCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientStaff'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /clients/update/{client_id}/:
    put:
      operationId: clients_update_update
      description: Updates information for an existing client .
      summary: Update Client Member
      parameters:
      - in: path
        name: client_id
        schema:
          type: integer
        required: true
      tags:
      - Client Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClientCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ClientCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /contact-us/send-email/:
    post:
      operationId: contact_us_send_email_create
      description: This endpoint allows users to send a contact us email with their
        details.
      summary: Send Contact Us Email
      tags:
      - contact-us
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactUsEmailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ContactUsEmailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ContactUsEmailRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: Email sent successfully.
        '400':
          description: Invalid data or email not sent.
  /contacts/{contact_id}/:
    get:
      operationId: contacts_retrieve
      description: Fetches detailed information about an contact  by their unique
        identifier.
      summary: Retrieve contact Details
      parameters:
      - in: path
        name: contact_id
        schema:
          type: integer
        required: true
      tags:
      - Contact Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: ''
  /contacts/{contact_id}/delete/:
    delete:
      operationId: contacts_delete_destroy
      description: Deletes an contact by ID. Requires administrative privileges.
      summary: Delete Contact
      parameters:
      - in: path
        name: contact_id
        schema:
          type: integer
        required: true
      tags:
      - Contact Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: contact deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: contact not found.
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied.
          description: ''
  /contacts/{contact_id}/phone-numbers/:
    get:
      operationId: contacts_phone_numbers_retrieve
      description: Retrieve a list of all phone numbers for a specific contact with
        pagination.
      summary: List all Phone Number for a contact
      parameters:
      - in: path
        name: contact_id
        schema:
          type: integer
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      tags:
      - Contact Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPhoneNumber'
          description: ''
  /contacts/{contact_id}/phone-numbers/create/:
    post:
      operationId: contacts_phone_numbers_create_create
      description: Create a new phone number for a specific client.
      parameters:
      - in: path
        name: contact_id
        schema:
          type: integer
        required: true
      tags:
      - Contact Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNumberCreateUpdateRequest'
            examples:
              CreatePhoneNumber:
                value:
                  number: '1234567890'
                  type: work
                summary: Create Phone Number
                description: Create a phone number with a type field restricted to
                  predefined choices.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PhoneNumberCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PhoneNumberCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneNumber'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /contacts/{contact_id}/update/:
    put:
      operationId: contacts_update_update
      description: Updates information for an existing Contact .
      summary: Update Contact details
      parameters:
      - in: path
        name: contact_id
        schema:
          type: integer
        required: true
      tags:
      - Contact Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ContactCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ContactCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /document/{document_id}/:
    get:
      operationId: get_document_detail
      description: 'Fetch detailed information about a specific document by its ID '
      summary: Retrieve a Folder by ID
      parameters:
      - in: path
        name: document_id
        schema:
          type: integer
        required: true
      tags:
      - Folder Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /document/{document_id}/history:
    get:
      operationId: get_document_history
      description: 'Fetch history information about a specific docuemnt by its ID '
      summary: Retrieve document history  by ID
      parameters:
      - in: path
        name: document_id
        schema:
          type: integer
        required: true
      tags:
      - Folder Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocumentVersion'
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /document_diffusions/:
    get:
      operationId: document_diffusions_list
      description: Retrieve a list of all the document diffusions with pagination.
      summary: List all the document diffusions.
      parameters:
      - in: query
        name: created_by
        schema:
          type: string
        description: Filter by creator's email (contains match)
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: query
        name: title
        schema:
          type: string
        description: Filter by document diffusion title (contains match)
      tags:
      - Document Diffusion Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDocumentDiffusion'
          description: ''
  /document_diffusions/{document_diffusion_id}/:
    get:
      operationId: document_diffusion_detail
      description: Fetches detailed information about a document diffusion by their
        ID.
      summary: Retrieve document diffusion Details
      parameters:
      - in: path
        name: document_diffusion_id
        schema:
          type: integer
        required: true
      tags:
      - Document Diffusion Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDiffusion'
          description: ''
  /document_diffusions/{document_diffusion_id}/comments-list/:
    get:
      operationId: document_diffusion_comments_list
      description: Retrieve a list of all the document diffusion comments with pagination.
      summary: List all the document diffusion comments.
      parameters:
      - in: path
        name: document_diffusion_id
        schema:
          type: integer
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      tags:
      - Document Diffusion Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDocumentDiffusionConfig'
          description: ''
  /document_diffusions/{document_diffusion_id}/delete/:
    delete:
      operationId: document_diffusion_delete
      description: Deletes a Document Diffusion by ID. Requires administrative privileges.
      summary: Delete Document Diffusion
      parameters:
      - in: path
        name: document_diffusion_id
        schema:
          type: integer
        required: true
      tags:
      - Document Diffusion Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: Document Diffusion deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Document Diffusion not found.
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied.
          description: ''
  /document_diffusions/{document_diffusion_id}/delete-document/:
    delete:
      operationId: document_diffusion_document_delete
      description: Delete the document and all its associated versions by providing
        the document ID.
      summary: Delete a document of a document diffusion
      parameters:
      - in: path
        name: document_diffusion_id
        schema:
          type: integer
        required: true
      tags:
      - Document Diffusion Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /document_diffusions/{document_diffusion_id}/update/:
    put:
      operationId: document_diffusion_update
      description: Updates informations for an existing document diffusion .
      summary: Update document diffusion
      parameters:
      - in: path
        name: document_diffusion_id
        schema:
          type: integer
        required: true
      tags:
      - Document Diffusion Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentDiffusionUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DocumentDiffusionUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentDiffusionUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDiffusion'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /document_diffusions/{document_diffusion_id}/update-status/:
    post:
      operationId: diffusion_intervenant_comment_create
      description: Add a comment to a specific Document Diffusion, with an optional
        document upload.
      summary: Add a comment to a Document Diffusion
      parameters:
      - in: path
        name: document_diffusion_id
        schema:
          type: integer
        required: true
      tags:
      - Document Diffusion Management
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DiffusionIntervenantCommentCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DiffusionIntervenantCommentCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiffusionIntervenantComment'
          description: Comment created successfully.
        '400':
          description: Validation error.
  /document_diffusions/{document_diffusion_id}/upload-document/:
    post:
      operationId: document_diffusion_upload
      description: Upload a file to the folder associated with the given Document
        Diffusion ID.
      summary: Upload a document to a Document Diffusion's folder
      parameters:
      - in: path
        name: document_diffusion_id
        schema:
          type: integer
        required: true
      tags:
      - Document Diffusion Management
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentUploadRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /document_diffusions/configs/:
    get:
      operationId: document_diffusion_config_list
      description: Retrieve a list of all the document diffusion configs with pagination.
      summary: List all the document diffusion configs.
      parameters:
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      tags:
      - Document Diffusion Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDocumentDiffusionConfig'
          description: ''
  /document_diffusions/configs/{document_diffusion_config_id}/:
    get:
      operationId: document_diffusion_config_detail
      description: Fetches detailed information about a document diffusion config
        by their ID.
      summary: Retrieve document diffusion config Details
      parameters:
      - in: path
        name: document_diffusion_config_id
        schema:
          type: integer
        required: true
      tags:
      - Document Diffusion Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDiffusionConfig'
          description: ''
  /document_diffusions/configs/{document_diffusion_config_id}/delete/:
    delete:
      operationId: document_diffusion_config_delete
      description: Deletes a Document Diffusion Config by ID. Requires administrative
        privileges.
      summary: Delete Document Diffusion Config
      parameters:
      - in: path
        name: document_diffusion_config_id
        schema:
          type: integer
        required: true
      tags:
      - Document Diffusion Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: Document Diffusion Config deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Document Diffusion Config not found.
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied.
          description: ''
  /document_diffusions/configs/create/:
    post:
      operationId: document_diffusion_config_create
      description: Create a new document diffusion config.
      tags:
      - Document Diffusion Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentDiffusionConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DocumentDiffusionConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentDiffusionConfigRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDiffusionConfig'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /document_diffusions/create/:
    post:
      operationId: document_diffusion_create
      description: Create a new document diffusion.
      tags:
      - Document Diffusion Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentDiffusionCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DocumentDiffusionCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentDiffusionCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDiffusion'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /folders/{folder_id}/:
    get:
      operationId: get_folder_detail
      description: 'Fetch detailed information about a specific Folder by its ID,
        including documents '
      summary: Retrieve a Folder by ID
      parameters:
      - in: path
        name: folder_id
        schema:
          type: integer
        required: true
      tags:
      - Folder Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /intervenant/projects/:
    get:
      operationId: list_project_intervenant_project
      description: Retrieve a list of all Projects with pagination.
      summary: List all Project
      parameters:
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -code
          - -description
          - -id
          - -name
          - code
          - description
          - id
          - name
        description: Comma-separated fields to order by (e.g., 'name', '-date_joined')
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: query
        name: search
        schema:
          type: string
        description: Search by code, name,description ,client name
      tags:
      - Project Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectIntervenant'
          description: ''
  /intervenant/projects/{project_id}/:
    get:
      operationId: get_intervenant_project_detail
      description: Fetches detailed information about an project member by their unique
        identifier.
      summary: Retrieve project Details
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - Project Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectIntervenant'
          description: ''
  /intervenant/roles/:
    get:
      operationId: intervenant_roles_retrieve
      description: Fetches the available roles for Intervenants, including each role's
        value and label.
      summary: Retrieve Intervenant Role Options
      tags:
      - Project Intervenant Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: Available roles for Intervenants
  /localisations/:
    get:
      operationId: localisations_list
      description: Retrieve a list of all the localisations with pagination.
      summary: List all the localisations.
      parameters:
      - in: query
        name: created_by
        schema:
          type: string
        description: Filter by creator's email (contains match)
      - in: query
        name: name
        schema:
          type: string
        description: Filter by localisation name (contains match)
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -created_at
          - -created_by__email
          - -id
          - -name
          - created_at
          - created_by__email
          - id
          - name
        description: Order results by fields (e.g., 'name', '-created_at')
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: query
        name: search
        schema:
          type: string
        description: Search by localisation name
      tags:
      - Document Diffusion Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLocalisation'
          description: ''
  /localisations/{localisation_id}/:
    get:
      operationId: localisation_detail
      description: Fetches detailed information about a localisation by their ID.
      summary: Retrieve localisation Details
      parameters:
      - in: path
        name: localisation_id
        schema:
          type: integer
        required: true
      tags:
      - Document Diffusion Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Localisation'
          description: ''
  /localisations/{localisation_id}/delete/:
    delete:
      operationId: localisations_delete_destroy
      description: Deletes a Localisation by ID. Requires administrative privileges.
      summary: Delete Localisation
      parameters:
      - in: path
        name: localisation_id
        schema:
          type: integer
        required: true
      tags:
      - Document Diffusion Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: Localisation deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Localisation not found.
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied.
          description: ''
  /localisations/{localisation_id}/update/:
    put:
      operationId: localisation_update
      description: Updates informations for an existing localisation .
      summary: Update localisation
      parameters:
      - in: path
        name: localisation_id
        schema:
          type: integer
        required: true
      tags:
      - Document Diffusion Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalisationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LocalisationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LocalisationRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Localisation'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /localisations/create/:
    post:
      operationId: localisation_create
      description: Create a new localisation.
      tags:
      - Document Diffusion Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalisationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LocalisationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LocalisationRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Localisation'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /login/:
    post:
      operationId: login_create
      description: Login endpoint to obtain access and refresh tokens
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Success:
                  value:
                    refresh: string
                    access: string
                  description: Successfully obtained tokens
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Unauthorized:
                  value:
                    detail: No active account found with the given credentials
                  description: Invalid credentials
          description: ''
  /logout/:
    post:
      operationId: logout_create
      description: Logout endpoint to blacklist refresh token
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '205':
          description: No response body
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                BadRequest:
                  value:
                    detail: Invalid token
                  summary: Bad Request
                  description: Invalid request or token
          description: ''
  /lots/:
    get:
      operationId: lots_retrieve
      description: Retrieve a list of all Lots with pagination.
      summary: List all Lot
      parameters:
      - in: query
        name: client_ids
        schema:
          type: string
        description: Filter by Client IDs (comma-separated)
      - in: query
        name: created_by
        schema:
          type: string
        description: Filter by creator's email (contains match)
      - in: query
        name: description
        schema:
          type: string
        description: Filter by lot description (contains match)
      - in: query
        name: name
        schema:
          type: string
        description: Filter by lot name (contains match)
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -client__name
          - -created_at
          - -created_by__email
          - -description
          - -id
          - -name
          - client__name
          - created_at
          - created_by__email
          - description
          - id
          - name
        description: Order results by fields (e.g., 'name', '-created_at')
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: query
        name: search
        schema:
          type: string
        description: 'Search by code, name,description '
      tags:
      - Lot Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLot'
          description: ''
  /lots/{lot_id}/:
    get:
      operationId: lots_retrieve_2
      description: Fetches detailed information about an lot member by their unique
        identifier.
      summary: Retrieve lot Details
      parameters:
      - in: path
        name: lot_id
        schema:
          type: integer
        required: true
      tags:
      - Lot Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lot'
          description: ''
  /lots/create/:
    post:
      operationId: lots_create_create
      description: Create a new lot .
      tags:
      - Lot Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LotCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LotCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LotCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lot'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /lots/delete/{lot_id}/:
    delete:
      operationId: lots_delete_destroy
      description: Deletes an Lot by ID. Requires administrative privileges.
      summary: Delete Lot
      parameters:
      - in: path
        name: lot_id
        schema:
          type: integer
        required: true
      tags:
      - Lot Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: lot deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: lot not found.
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied.
          description: ''
  /lots/update/{lot_id}/:
    put:
      operationId: lots_update_update
      description: Updates information for an existing lot .
      summary: Update Lot
      parameters:
      - in: path
        name: lot_id
        schema:
          type: integer
        required: true
      tags:
      - Lot Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LotCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LotCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LotCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lot'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /notifications/in-app/:
    get:
      operationId: get_in_app_notifications_list
      description: Retrieve a list of all unread notifications with pagination.
      summary: List all unread notifications
      parameters:
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      tags:
      - Notifications Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInAppNotification'
          description: ''
  /notifications/in-app/{notification_id}:
    get:
      operationId: get_in_app_notification_detail
      description: Retrieve details of a specific notification by its ID for the authenticated
        user.
      summary: 'Get a in app  notification detail '
      parameters:
      - in: path
        name: notification_id
        schema:
          type: integer
        required: true
      tags:
      - Notifications Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InAppNotification'
          description: 'Success: Notification retrieved'
        '404':
          description: 'Error: Notification not found'
  /notifications/in-app/{notification_id}/read/:
    post:
      operationId: mark_notification_as_read
      description: Marks a single notification as read for the authenticated user
        by notification ID.
      summary: Mark a notification as read
      parameters:
      - in: path
        name: notification_id
        schema:
          type: integer
        required: true
      tags:
      - Notifications Management
      security:
      - jwtAuth: []
      responses:
        '200':
          description: 'Success: Notification marked as read'
        '404':
          description: 'Error: No matching notification found'
  /password-confirm/:
    post:
      operationId: password_confirm_create
      description: Set a new password using the provided token and UID. The user must
        submit the token received by email, along with their user ID and the new password.
      tags:
      - Password Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetNewPasswordRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetNewPasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetNewPasswordRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Password has been successfully reset.
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Invalid input data, such as an invalid token or password
                  criteria not met.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Invalid UID or token.
          description: ''
  /password-reset/:
    post:
      operationId: password_reset_create
      description: Request a password reset link with redirect URI. The user will
        receive an email with a link to reset their password if the email is registered
        in the system.
      tags:
      - Password Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequestRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Password reset link sent successfully if email is valid.
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Invalid input data.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Email not found in the system.
          description: ''
  /phone-numbers/{phone_number_id}/:
    get:
      operationId: phone_numbers_retrieve
      description: Fetches detailed information about an Phone Number  by their unique
        identifier.
      summary: Retrieve Phone Number Details
      parameters:
      - in: path
        name: phone_number_id
        schema:
          type: integer
        required: true
      tags:
      - Contact Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneNumber'
          description: ''
  /phone-numbers/{phone_number_id}/delete/:
    delete:
      operationId: phone_numbers_delete_destroy
      description: Deletes an phone number by ID. Requires administrative privileges.
      summary: Delete Phone number
      parameters:
      - in: path
        name: phone_number_id
        schema:
          type: integer
        required: true
      tags:
      - Contact Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: phone number deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: phone number not found.
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied.
          description: ''
  /phone-numbers/{phone_number_id}/update/:
    put:
      operationId: phone_numbers_update_update
      description: Updates information for an existing Phone Number .
      summary: Update Phone Number details
      parameters:
      - in: path
        name: phone_number_id
        schema:
          type: integer
        required: true
      tags:
      - Contact Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNumberCreateUpdateRequest'
            examples:
              CreatePhoneNumber:
                value:
                  number: '1234567890'
                  type: work
                summary: Create Phone Number
                description: Create a phone number with a type field restricted to
                  predefined choices.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PhoneNumberCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PhoneNumberCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneNumber'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /products/:
    get:
      operationId: product_list
      description: Retrieve a list of all the products with pagination.
      summary: List all the products.
      parameters:
      - in: query
        name: category
        schema:
          type: string
        description: Filter by Categories IDs (comma-separated)
      - in: query
        name: name
        schema:
          type: string
        description: Filter by product name (contains match)
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -category__name
          - -created_at
          - -created_by__email
          - -description
          - -id
          - -name
          - category__name
          - created_at
          - created_by__email
          - description
          - id
          - name
        description: Order results by fields (e.g., 'name', '-created_at')
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: query
        name: search
        schema:
          type: string
        description: Search by product name, or description
      tags:
      - Product Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProduct'
          description: ''
  /products/{product_id}/:
    get:
      operationId: product_detail
      description: Fetches detailed information about a product by their ID.
      summary: Retrieve product Details
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - Product Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /products/{product_id}/delete/:
    delete:
      operationId: product_delete
      description: Deletes a Product by ID. Requires administrative privileges.
      summary: Delete Product
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - Product Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: product deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: product not found.
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied.
          description: ''
  /products/{product_id}/update/:
    put:
      operationId: product_update
      description: Updates information for an existing product .
      summary: Update product
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - Product Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /products/create/:
    post:
      operationId: product_create
      description: Create a new product.
      tags:
      - Product Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /products/media/{product_media_id}/:
    get:
      operationId: product_media_detail
      description: Fetches detailed information about a product media by their ID.
      summary: Retrieve product media details
      parameters:
      - in: path
        name: product_media_id
        schema:
          type: integer
        required: true
      tags:
      - Product Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMedia'
          description: ''
  /products/media/{product_media_id}/delete/:
    delete:
      operationId: product_media_delete
      description: Deletes a Product Media by ID. Requires administrative privileges.
      summary: Delete Product Media
      parameters:
      - in: path
        name: product_media_id
        schema:
          type: integer
        required: true
      tags:
      - Product Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: product media deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: product media not found.
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied.
          description: ''
  /products/media/create/:
    post:
      operationId: product_media_create
      description: Upload a Product Media.
      tags:
      - Product Management
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductMediaRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                Success:
                  value:
                    message: Product Media created successfully!
                  description: Successfully created the product media
          description: ''
  /project-lots/{project_lot_id}/:
    get:
      operationId: project_lots_retrieve
      description: Fetch detailed information about a specific ProjectLot by its ID.
      summary: Retrieve a Project Lot by ID
      parameters:
      - in: path
        name: project_lot_id
        schema:
          type: integer
        required: true
      tags:
      - Appel d'offre Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectLot'
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /project-lots/{project_lot_id}/delete/:
    delete:
      operationId: project_lots_delete_destroy
      description: Remove a lot from a project by providing the project lot ID.
      summary: Remove Lot from Project
      parameters:
      - in: path
        name: project_lot_id
        schema:
          type: integer
        required: true
      tags:
      - Appel d'offre Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /project-lots/{project_lot_id}/subcontractor/devis/:
    get:
      operationId: project_lots_subcontractor_devis_retrieve
      description: Fetch detailed information about a specific 'devis' associated
        with a project lot. This API is restricted to subcontractor access only.
      summary: Retrieve  devis by  Project Lot  ID
      parameters:
      - in: path
        name: project_lot_id
        schema:
          type: integer
        required: true
      tags:
      - Appel d'offre Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /project-lots/{project_lot_id}/subcontractors/:
    get:
      operationId: project_lots_subcontractors_retrieve_2
      description: Retrieve a list of all subcontractors assigned to a specific ProjectLot.
      summary: List all Subcontractors for a ProjectLot
      parameters:
      - in: query
        name: created_by
        schema:
          type: string
        description: Filter by creator's email (contains match)
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -created_at
          - -id
          - -status
          - -subcontractor__name
          - -subcontractor_staff__user__first_name
          - created_at
          - id
          - status
          - subcontractor__name
          - subcontractor_staff__user__first_name
        description: Order results by fields (e.g., 'subcontractor__name', '-created_at')
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: path
        name: project_lot_id
        schema:
          type: integer
        required: true
      - in: query
        name: search
        schema:
          type: string
        description: Search by subcontractor name, status, or subcontractor staff
          email/first name
      - in: query
        name: status
        schema:
          type: string
          enum:
          - canceled
          - completed
          - in_progress
          - not_responding
          - pending
        description: Filter by subcontractor status
      - in: query
        name: subcontractor_name
        schema:
          type: string
        description: Filter by subcontractor name (contains match)
      - in: query
        name: subcontractor_staff_email
        schema:
          type: string
        description: Filter by subcontractor staff email (contains match)
      - in: query
        name: subcontractor_staff_first_name
        schema:
          type: string
        description: Filter by subcontractor staff first name (contains match)
      tags:
      - Appel d'offre Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectLotSubcontractor'
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /project-lots/{project_lot_id}/subcontractors/assign/:
    post:
      operationId: project_lots_subcontractors_assign_create
      description: Assign a subcontractor to a specific project lot.
      summary: Assign Subcontractor to a ProjectLot
      parameters:
      - in: path
        name: project_lot_id
        schema:
          type: integer
        required: true
      tags:
      - Appel d'offre Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectLotSubcontractorCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectLotSubcontractorCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectLotSubcontractorCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectLotSubcontractor'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /project-lots/{project_lot_id}/update-status/:
    put:
      operationId: project_lots_update_status_update
      description: Update the status of a ProjectLot by providing the new status.
      summary: Update Status of Project Lot
      parameters:
      - in: path
        name: project_lot_id
        schema:
          type: integer
        required: true
      tags:
      - Appel d'offre Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectLotUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectLotUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectLotUpdateRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectLot'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /project-lots/{project_lot_id}/upload-devis/:
    post:
      operationId: upload_devis_by_subconstactor
      description: Allows subcontractors to upload or update their Devis (pricing
        proposal) document.
      summary: Upload or update Devis document for ProjectLotSubcontractor
      parameters:
      - in: path
        name: project_lot_id
        schema:
          type: integer
        required: true
      tags:
      - Appel d'offre Documents Management
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentUploadRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /project-lots/{project_lot_id}/upload-document/:
    post:
      operationId: project_lots_upload_document_create
      description: Upload a file to the folder associated with the given ProjectLot
        ID.
      summary: Upload a document to a ProjectLot's folder
      parameters:
      - in: path
        name: project_lot_id
        schema:
          type: integer
        required: true
      tags:
      - Appel d'offre Documents Management
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentUploadRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /project-lots/create/:
    post:
      operationId: project_lots_create_create
      description: Assign a lot to a project by providing the project ID and lot ID.
      summary: Add Lot to Project
      tags:
      - Appel d'offre Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectLotCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectLotCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectLotCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectLot'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /project-lots/documents/{document_id}/delete/:
    delete:
      operationId: project_lots_documents_delete_destroy
      description: Delete the document and all its associated versions by providing
        the document ID.
      summary: Delete a document by its ID
      parameters:
      - in: path
        name: document_id
        schema:
          type: integer
        required: true
      tags:
      - Appel d'offre Documents Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /project-lots/documents/{document_id}/update/:
    post:
      operationId: project_lots_documents_update_create
      description: Upload a new version for an existing document and make it the latest
        version.
      summary: Update a document by adding a new version
      parameters:
      - in: path
        name: document_id
        schema:
          type: integer
        required: true
      tags:
      - Appel d'offre Documents Management
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentUploadRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /project-lots/subcontractors/{project_lot_subcontractor_id}/:
    get:
      operationId: project_lots_subcontractors_retrieve
      description: Retrieve a specific subcontractor assigned to a project lot by
        ID.
      summary: Retrieve a Subcontractor for a ProjectLot by ID
      parameters:
      - in: path
        name: project_lot_subcontractor_id
        schema:
          type: integer
        required: true
      tags:
      - Appel d'offre Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectLotSubcontractor'
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /project-lots/subcontractors/{project_lot_subcontractor_id}/remove/:
    delete:
      operationId: project_lots_subcontractors_remove_destroy
      description: Remove a subcontractor assigned to a specific project lot.
      summary: Remove Subcontractor from a ProjectLot
      parameters:
      - in: path
        name: project_lot_subcontractor_id
        schema:
          type: integer
        required: true
      tags:
      - Appel d'offre Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /project-lots/subcontractors/{project_lot_subcontractor_id}/update-status/:
    put:
      operationId: update_project_lot_subcontractor_status
      description: Update the status of a ProjectLot Subcontractor by providing the
        new status.
      summary: Update Status of Project Lot Subcontractor
      parameters:
      - in: path
        name: project_lot_subcontractor_id
        schema:
          type: integer
        required: true
      tags:
      - Appel d'offre Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectLotSubcontractorUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectLotSubcontractorUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectLotSubcontractorUpdateRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectLotSubcontractor'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /project-lots/subcontractors/documents/{document_id}/delete-devis/:
    delete:
      operationId: project_lots_subcontractors_documents_delete_devis_destroy
      description: Delete the document and all its associated versions by providing
        the document ID.
      summary: Delete a document by its ID
      parameters:
      - in: path
        name: document_id
        schema:
          type: integer
        required: true
      tags:
      - Appel d'offre Documents Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /project-lots/subcontractors/documents/{project_lot_subcontractor_id}/upload-devis/:
    post:
      operationId: project_lots_subcontractors_documents_upload_devis_create
      description: Allows subcontractors to upload or update their Devis (pricing
        proposal) document.
      summary: Upload or update Devis document for ProjectLotSubcontractor
      parameters:
      - in: path
        name: project_lot_subcontractor_id
        schema:
          type: integer
        required: true
      tags:
      - Appel d'offre Documents Management
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentUploadRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /projects/:
    get:
      operationId: projects_retrieve
      description: Retrieve a list of all Projects with pagination.
      summary: List all Project
      parameters:
      - in: query
        name: client_ids
        schema:
          type: string
        description: Filter by Client IDs (comma-separated)
      - in: query
        name: code
        schema:
          type: string
        description: Filter by project code (contains match)
      - in: query
        name: created_by
        schema:
          type: string
        description: Filter by creator's email (contains match)
      - in: query
        name: description
        schema:
          type: string
        description: Filter by project description (contains match)
      - in: query
        name: name
        schema:
          type: string
        description: Filter by project name (contains match)
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -client__name
          - -code
          - -created_at
          - -created_by__email
          - -description
          - -id
          - -manager__user__email
          - -name
          - -percentage_complete
          - -start_date
          - -status
          - client__name
          - code
          - created_at
          - created_by__email
          - description
          - id
          - manager__user__email
          - name
          - percentage_complete
          - start_date
          - status
        description: Comma-separated fields to order by (e.g., 'name', '-date_joined')
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: query
        name: percentage_complete_max
        schema:
          type: number
          format: double
        description: Maximum completion percentage
      - in: query
        name: percentage_complete_min
        schema:
          type: number
          format: double
        description: Minimum completion percentage
      - in: query
        name: search
        schema:
          type: string
        description: Search by code, name,description ,client name
      - in: query
        name: status
        schema:
          type: string
          enum:
          - canceled
          - completed
          - draft
          - in_progress
          - on_hold
          - pending
        description: Filter by project status
      tags:
      - Project Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProject'
          description: ''
  /projects/{project_id}/:
    get:
      operationId: projects_retrieve_2
      description: Fetches detailed information about an project member by their unique
        identifier.
      summary: Retrieve project Details
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - Project Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /projects/{project_id}/assign-staff/:
    post:
      operationId: assignProjectStaff
      description: Assigns a staff member to a project with a specific role and supervisor.
      summary: Assign Staff to Project
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - Project Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectStaffAssignRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectStaffAssignRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectStaffAssignRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStaff'
          description: ''
  /projects/{project_id}/intervenants/:
    get:
      operationId: project_intervenant_list
      description: Retrieve a list of all Intervenants for a specific project.
      summary: List all Intervenants in a project
      parameters:
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -created_at
          - -created_by__email
          - -id
          - -intervenant__role
          - -intervenant__user__date_joined
          - -intervenant__user__email
          - -intervenant__user__first_name
          - -intervenant__user__last_name
          - created_at
          - created_by__email
          - id
          - intervenant__role
          - intervenant__user__date_joined
          - intervenant__user__email
          - intervenant__user__first_name
          - intervenant__user__last_name
        description: Order results by fields (e.g., 'name', '-created_at')
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      - in: query
        name: role
        schema:
          type: string
          enum:
          - Architecte
          - Assistance maîtrise d’ouvrage hygiène et environnement
          - Bureau d'étude technique
          - Bureau de contrôle
          - Client
          - Coordonnateur sécurité et protection de la santé
        description: Filter by  role
      - in: query
        name: search
        schema:
          type: string
        description: Search by first name, last name, or email
      tags:
      - Project Intervenant Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectIntervenant'
          description: ''
  /projects/{project_id}/intervenants/add/:
    post:
      operationId: project_intervenant_create
      description: Creates a new Intervenant and assigns them to a Project.
      summary: Add an Intervenant to a Project
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - Project Intervenant Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntervenantCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/IntervenantCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/IntervenantCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectIntervenant'
          description: ''
  /projects/{project_id}/lots/:
    get:
      operationId: projects_lots_retrieve
      description: Retrieve a list of all ProjectLots for a specific project with
        pagination.
      summary: List all Lots for a Project
      parameters:
      - in: query
        name: created_by
        schema:
          type: string
        description: Filter by creator's email (contains match)
      - in: query
        name: lot_name
        schema:
          type: string
        description: Filter by lot name (contains match)
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -created_at
          - -id
          - -lot__name
          - -status
          - created_at
          - id
          - lot__name
          - status
        description: Order results by fields (e.g., 'lot__name', '-created_at')
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      - in: query
        name: search
        schema:
          type: string
        description: Search by lot name or status
      - in: query
        name: status
        schema:
          type: string
          enum:
          - canceled
          - completed
          - in_progress
          - pending
          - review
        description: Filter by project lot status
      tags:
      - Appel d'offre Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectLot'
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /projects/{project_id}/staff/:
    get:
      operationId: listProjectStaff
      description: Retrieve a list of all staff members assigned to a specific project
        with pagination.
      summary: List all Staff for a Project
      parameters:
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - Project Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectStaff'
          description: ''
  /projects/{project_id}/staff/reorder/:
    put:
      operationId: projects_staff_reorder_update
      description: Reorders project staff by updating the supervisor relationships
        in a single request.
      summary: Reorder Project Staff
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - Project Management
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProjectStaffReorderRequest'
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProjectStaffReorderRequest'
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProjectStaffReorderRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /projects/{project_id}/staff/tree/:
    get:
      operationId: getProjectStaffTree
      description: Returns the project staff organized as a tree structure, reflecting
        hierarchical relationships.
      summary: Retrieve Project Staff as a Hierarchical Tree
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - Project Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectStaffTree'
          description: ''
  /projects/{project_id}/suivi-administrative/:
    get:
      operationId: list_suivi_administrative
      description: Retrieve a list of Suivi Administrative processes for each project
        lot in a project, with pagination and filtering.
      summary: List all administrative processes grouped by project lot
      parameters:
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -created_at
          - -created_by__email
          - -id
          - -project_lot__lot__name
          - -status
          - created_at
          - created_by__email
          - id
          - project_lot__lot__name
          - status
        description: Order results by fields (e.g., 'lot__name', '-created_at')
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      - in: query
        name: search
        schema:
          type: string
        description: Search by administrative status or related intervenant
      - in: query
        name: status
        schema:
          type: string
          enum:
          - completed
          - in_progress
          - not_started
        description: Filter by status
      tags:
      - Suivi Administrative Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSuiviAdministrative'
          description: ''
  /projects/{project_id}/suivi-administrative/intervenant/:
    get:
      operationId: list_suivi_administrative_intervenant
      description: Retrieve a list of Suivi Administrative processes with steps filtered
        for the logged-in intervenant.
      summary: List administrative processes assigned to the intervenant
      parameters:
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -created_at
          - -created_by__email
          - -id
          - -project_lot__lot__name
          - -status
          - created_at
          - created_by__email
          - id
          - project_lot__lot__name
          - status
        description: Order results by fields (e.g., 'lot__name', '-created_at')
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      - in: query
        name: search
        schema:
          type: string
        description: Search by administrative status or related intervenant
      tags:
      - Suivi Administrative Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSuiviAdministrativeIntervenant'
          description: ''
  /projects/{project_id}/templates/:
    get:
      operationId: projects_templates_list
      description: Retrieve a list of all email templates associated with a project.
      summary: List all email templates for a project
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - Project Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectEmailTemplate'
          description: ''
  /projects/create/:
    post:
      operationId: projects_create_create
      description: Create a new project .
      tags:
      - Project Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /projects/delete/{project_id}/:
    delete:
      operationId: projects_delete_destroy
      description: Deletes an Project by ID. Requires administrative privileges.
      summary: Delete Project
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - Project Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: project deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: project not found.
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied.
          description: ''
  /projects/intervenants/{project_intervenant_id}/:
    get:
      operationId: project_intervenant_detail
      description: Fetches detailed information about a specific Project Intervenant
        by ID.
      summary: Retrieve Project Intervenant Details
      parameters:
      - in: path
        name: project_intervenant_id
        schema:
          type: integer
        required: true
      tags:
      - Project Intervenant Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectIntervenant'
          description: Project Intervenant details retrieved successfully.
        '404':
          description: Project Intervenant not found.
  /projects/intervenants/{project_intervenant_id}/delete/:
    delete:
      operationId: project_intervenant_delete
      description: Delete an Intervenant from a specific project.
      summary: Remove an Intervenant from a project
      parameters:
      - in: path
        name: project_intervenant_id
        schema:
          type: integer
        required: true
      tags:
      - Project Intervenant Management
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Intervenant removed successfully.
        '404':
          description: ProjectIntervenant not found.
        '500':
          description: An unexpected error occurred.
  /projects/intervenants/{project_intervenant_id}/update/:
    put:
      operationId: project_intervenant_update
      description: Update user information (excluding email) and role of an Intervenant
        assigned to a project.
      summary: Update an Intervenant's data and role in a project
      parameters:
      - in: path
        name: project_intervenant_id
        schema:
          type: integer
        required: true
      tags:
      - Project Intervenant Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntervenantUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/IntervenantUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/IntervenantUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Intervenant updated successfully.
        '404':
          description: ProjectIntervenant not found.
  /projects/staff/{project_staff_id}/:
    get:
      operationId: getProjectStaffById
      description: Fetches detailed information about a project staff member by their
        unique ID.
      summary: Retrieve Project Staff by ID
      parameters:
      - in: path
        name: project_staff_id
        schema:
          type: integer
        required: true
      tags:
      - Project Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStaff'
          description: ''
  /projects/staff/{project_staff_id}/remove/:
    delete:
      operationId: removeProjectStaffById
      description: Removes a specific project staff member by their unique ID.
      summary: Remove Project Staff
      parameters:
      - in: path
        name: project_staff_id
        schema:
          type: integer
        required: true
      tags:
      - Project Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /projects/staff/{project_staff_id}/update/:
    put:
      operationId: updateProjectStaffById
      description: Updates details (e.g., role, supervisor) of a specific project
        staff member.
      summary: Update Project Staff
      parameters:
      - in: path
        name: project_staff_id
        schema:
          type: integer
        required: true
      tags:
      - Project Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectStaffUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectStaffUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectStaffUpdateRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStaff'
          description: ''
  /projects/templates/{template_id}/:
    get:
      operationId: projects_templates_retrieve
      description: Fetch detailed information about an email template.
      summary: Retrieve an Email Template by ID
      parameters:
      - in: path
        name: template_id
        schema:
          type: integer
        required: true
      tags:
      - Project Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectEmailTemplate'
          description: ''
  /projects/templates/{template_id}/reset/:
    post:
      operationId: projects_templates_reset_create
      description: Resets the specified email template for the given project to the
        default settings.
      summary: Reset a single email template to default
      parameters:
      - in: path
        name: template_id
        schema:
          type: integer
        required: true
      tags:
      - Project Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectEmailTemplate'
          description: ''
  /projects/templates/{template_id}/update/:
    put:
      operationId: projects_templates_update_update
      description: Updates an existing email template for a project.
      summary: Update an email template for a project
      parameters:
      - in: path
        name: template_id
        schema:
          type: integer
        required: true
      tags:
      - Project Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectEmailTemplateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectEmailTemplateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectEmailTemplateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectEmailTemplate'
          description: ''
  /projects/update/{project_id}/:
    put:
      operationId: projects_update_update
      description: Updates information for an existing project .
      summary: Update Project
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - Project Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /set-password/:
    post:
      operationId: set_password_create
      description: Allows users to set a new password using a provided UID and token.
        This endpoint is part of the password reset flow, typically accessed through
        a link sent to the user's email.
      tags:
      - Password Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetasswordRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetasswordRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Password has been successfully set.
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Request contains invalid data or validation errors.
          description: ''
  /subcontractor/projects/:
    get:
      operationId: list_project_subcontractor
      description: Retrieve a list of all Projects with pagination.
      summary: List all Project
      parameters:
      - in: query
        name: code
        schema:
          type: string
        description: Filter by project code (contains match)
      - in: query
        name: description
        schema:
          type: string
        description: Filter by project description (contains match)
      - in: query
        name: name
        schema:
          type: string
        description: Filter by project name (contains match)
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -code
          - -description
          - -id
          - -name
          - code
          - description
          - id
          - name
        description: Comma-separated fields to order by (e.g., 'name', '-date_joined')
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: query
        name: search
        schema:
          type: string
        description: Search by code, name,description ,client name
      tags:
      - Project Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectSubcontractor'
          description: ''
  /subcontractor/projects/{project_id}/:
    get:
      operationId: get_subcontractor_project_detail
      description: Fetches detailed information about an project member by their unique
        identifier.
      summary: Retrieve project Details
      parameters:
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - Project Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSubcontractor'
          description: ''
  /subcontractors/:
    get:
      operationId: subcontractors_retrieve
      description: Retrieve a list of all Subcontractors with pagination.
      summary: List all Subcontractor
      parameters:
      - in: query
        name: client_ids
        schema:
          type: string
        description: Filter by Client IDs (comma-separated)
      - in: query
        name: contact_email
        schema:
          type: string
        description: Filter by contact email (contains match)
      - in: query
        name: created_by
        schema:
          type: string
        description: Filter by the creator's email
      - in: query
        name: is_active
        schema:
          type: boolean
        description: Filter by active status (True or False)
      - in: query
        name: lot_ids
        schema:
          type: string
        description: Filter by Lot IDs (comma-separated)
      - in: query
        name: name
        schema:
          type: string
        description: Filter by subcontractor name (contains match)
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -contact_email
          - -created_at
          - -created_by__email
          - -id
          - -is_active
          - -name
          - -owner__email
          - -phone_number
          - -siren_number
          - contact_email
          - created_at
          - created_by__email
          - id
          - is_active
          - name
          - owner__email
          - phone_number
          - siren_number
        description: Comma-separated fields to order by (e.g., 'name', '-created_at')
      - in: query
        name: owner_email
        schema:
          type: string
        description: Filter by the owner's email
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: query
        name: phone_number
        schema:
          type: string
        description: Filter by phone number (contains match)
      - in: query
        name: search
        schema:
          type: string
        description: Search by first name, last name, or email
      - in: query
        name: siren_number
        schema:
          type: string
        description: Filter by SIREN number (contains match)
      tags:
      - Subcontractor Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSubcontractort'
          description: ''
  /subcontractors/{subcontractor_id}/:
    get:
      operationId: subcontractors_retrieve_2
      description: Fetches detailed information about an Subcontractor member by their
        unique identifier.
      summary: Retrieve Subcontractor Details
      parameters:
      - in: path
        name: subcontractor_id
        schema:
          type: integer
        required: true
      tags:
      - Subcontractor Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subcontractor'
          description: ''
  /subcontractors/{subcontractor_id}/owner/:
    get:
      operationId: subcontractors_owner_retrieve
      description: Fetches the owner details of a Subcontractor by the Subcontractor's
        ID.
      summary: Retrieve Subcontractor Owner Details
      parameters:
      - in: path
        name: subcontractor_id
        schema:
          type: integer
        required: true
      tags:
      - Subcontractor Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /subcontractors/{subcontractor_id}/owner/assign/:
    put:
      operationId: subcontractors_owner_assign_update
      description: Assigns an owner to a Subcontractor by setting a user as the owner.
      summary: Assign Owner to Subcontractor
      parameters:
      - in: path
        name: subcontractor_id
        schema:
          type: integer
        required: true
      tags:
      - Subcontractor Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcontractorOwnerCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubcontractorOwnerCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubcontractorOwnerCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subcontractor'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /subcontractors/{subcontractor_id}/owner/update/:
    put:
      operationId: subcontractors_owner_update_update
      description: Update an owner to a Subcontractor by setting a user as the owner.
      summary: Update Owner to Subcontractor
      parameters:
      - in: path
        name: subcontractor_id
        schema:
          type: integer
        required: true
      tags:
      - Subcontractor Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcontractorOwnerUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubcontractorOwnerUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubcontractorOwnerUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subcontractor'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /subcontractors/{subcontractor_id}/staff/:
    get:
      operationId: subcontractors_staff_retrieve_2
      description: Retrieve a list of all subcontractor staff users with pagination.
      summary: List all Subcontractor staff
      parameters:
      - in: query
        name: created_by
        schema:
          type: string
        description: Filter by created by email (contains match)
      - in: query
        name: email
        schema:
          type: string
        description: Filter by email (contains match)
      - in: query
        name: first_name
        schema:
          type: string
        description: Filter by first name (contains match)
      - in: query
        name: is_active
        schema:
          type: boolean
        description: Filter by active status (True or False)
      - in: query
        name: last_name
        schema:
          type: string
        description: Filter by last name (contains match)
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -created_at
          - -created_by__email
          - -id
          - -user__date_joined
          - -user__email
          - -user__first_name
          - -user__is_active
          - -user__last_name
          - created_at
          - created_by__email
          - id
          - user__date_joined
          - user__email
          - user__first_name
          - user__is_active
          - user__last_name
        description: Comma-separated fields to order by (e.g., 'name', '-date_joined')
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: query
        name: search
        schema:
          type: string
        description: Search by first name, last name, or email
      - in: path
        name: subcontractor_id
        schema:
          type: integer
        required: true
      tags:
      - Subcontractor Staff Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSubcontractorStaff'
          description: ''
  /subcontractors/{subcontractor_id}/staff/create/:
    post:
      operationId: subcontractors_staff_create_create
      description: Create a new subcontractor staff member.
      parameters:
      - in: path
        name: subcontractor_id
        schema:
          type: integer
        required: true
      tags:
      - Subcontractor Staff Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcontractorStaffCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubcontractorStaffCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubcontractorStaffCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubcontractorStaff'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /subcontractors/create/:
    post:
      operationId: subcontractors_create_create
      description: Create a new Subcontractor .
      tags:
      - Subcontractor Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcontractorCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubcontractorCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubcontractorCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subcontractor'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /subcontractors/delete/{subcontractor_id}/:
    delete:
      operationId: subcontractors_delete_destroy
      description: Deletes an Subcontractor by ID. Requires administrative privileges.
      summary: Delete Subcontractor
      parameters:
      - in: path
        name: subcontractor_id
        schema:
          type: integer
        required: true
      tags:
      - Subcontractor Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: Subcontractor deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Subcontractor not found.
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied.
          description: ''
  /subcontractors/staff/:
    get:
      operationId: get_subcontractor_staff_list
      description: Retrieve a list of all subcontractor staff users with pagination.
      summary: List all Subcontractor staff
      parameters:
      - in: query
        name: created_by
        schema:
          type: string
        description: Filter by created by email (contains match)
      - in: query
        name: email
        schema:
          type: string
        description: Filter by email (contains match)
      - in: query
        name: first_name
        schema:
          type: string
        description: Filter by first name (contains match)
      - in: query
        name: is_active
        schema:
          type: boolean
        description: Filter by active status (True or False)
      - in: query
        name: last_name
        schema:
          type: string
        description: Filter by last name (contains match)
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -created_at
          - -created_by__email
          - -id
          - -user__date_joined
          - -user__email
          - -user__first_name
          - -user__is_active
          - -user__last_name
          - created_at
          - created_by__email
          - id
          - user__date_joined
          - user__email
          - user__first_name
          - user__is_active
          - user__last_name
        description: Comma-separated fields to order by (e.g., 'name', '-date_joined')
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: query
        name: search
        schema:
          type: string
        description: Search by first name, last name, or email
      tags:
      - Subcontractor Staff Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSubcontractorStaff'
          description: ''
  /subcontractors/staff/{subcontractor_staff_id}/:
    get:
      operationId: subcontractors_staff_retrieve
      description: Fetches detailed information about an subcontractor staff member
        by their unique identifier.
      summary: Retrieve Subcontractor Staff Details
      parameters:
      - in: path
        name: subcontractor_staff_id
        schema:
          type: integer
        required: true
      tags:
      - Subcontractor Staff Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubcontractorStaff'
          description: ''
  /subcontractors/staff/{subcontractor_staff_id}/delete/:
    delete:
      operationId: subcontractors_staff_delete_destroy
      description: Deletes an subcontractor user by ID. Requires administrative privileges.
      summary: Delete Subcontractor Staff
      parameters:
      - in: path
        name: subcontractor_staff_id
        schema:
          type: integer
        required: true
      tags:
      - Subcontractor Staff Management
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: User deleted successfully.
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: User not found.
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied.
          description: ''
  /subcontractors/staff/{subcontractor_staff_id}/update/:
    patch:
      operationId: subcontractors_staff_update_partial_update
      description: Updates information for an existing  subcontractor staff member.
      summary: Update  Subcontractor Staff Member
      parameters:
      - in: path
        name: subcontractor_staff_id
        schema:
          type: integer
        required: true
      tags:
      - Subcontractor Staff Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSubcontractorStaffUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSubcontractorStaffUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSubcontractorStaffUpdateRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubcontractorStaff'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /subcontractors/staff/create/:
    post:
      operationId: create_subcontractor_by_subcontractor_user
      description: Create a new subcontractor staff member by subcontractor .
      tags:
      - Subcontractor Staff Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcontractorStaffCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubcontractorStaffCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubcontractorStaffCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubcontractorStaff'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /subcontractors/update/{subcontractor_id}/:
    put:
      operationId: subcontractors_update_update
      description: Updates information for an existing Subcontractor .
      summary: Update Subcontractor
      parameters:
      - in: path
        name: subcontractor_id
        schema:
          type: integer
        required: true
      tags:
      - Subcontractor Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcontractorUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubcontractorUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubcontractorUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subcontractor'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /suivi-administrative/{suivi_administrative_id}/:
    get:
      operationId: retrieve_suivi_administrative_detail
      description: Fetches detailed information about a specific Suivi Administrative
        record by ID.
      summary: Retrieve details of a specific Suivi Administrative record
      parameters:
      - in: path
        name: suivi_administrative_id
        schema:
          type: integer
        required: true
      tags:
      - Suivi Administrative Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuiviAdministrative'
          description: ''
        '404':
          description: Suivi Administrative record not found.
  /suivi-administrative/{suivi_administrative_id}/intervenant/:
    get:
      operationId: retrieve_suivi_administrative_detail_intervenant
      description: Fetches detailed information about a specific Suivi Administrative
        record by ID, filtering steps assigned to the intervenant.
      summary: Retrieve details of a specific Suivi Administrative record for an intervenant
      parameters:
      - in: path
        name: suivi_administrative_id
        schema:
          type: integer
        required: true
      tags:
      - Suivi Administrative Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuiviAdministrativeIntervenant'
          description: ''
        '404':
          description: Suivi Administrative record not found.
        '403':
          description: You are not authorized.
  /suivi-administrative/steps/{step_id}/comments/:
    get:
      operationId: list_suivi_administrative_step_comments
      description: Retrieve a paginated list of comments for a specific administrative
        step.
      summary: List comments for a Suivi Administrative Step
      parameters:
      - in: query
        name: page
        schema:
          type: integer
        description: Page number of the results to fetch
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: path
        name: step_id
        schema:
          type: integer
        required: true
      tags:
      - Suivi Administrative Management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSuiviAdministrativeStepComment'
          description: ''
  /suivi-administrative/steps/{step_id}/documents/upload/:
    post:
      operationId: upload_suivi_administrative_step_document
      description: Allows users to upload a single document to a specific Suivi Administrative
        Step.
      summary: Upload a document to a Suivi Administrative Step
      parameters:
      - in: path
        name: step_id
        schema:
          type: integer
        required: true
      tags:
      - Suivi Administrative Management
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentUploadRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepDocument'
          description: ''
        '400':
          description: Validation error.
        '404':
          description: Step not found.
  /suivi-administrative/steps/{step_id}/update/:
    patch:
      operationId: update_suivi_administrative_step
      description: Update the status and nbr_of_days for a specific administrative
        step, with automatic calculation of target_date.
      summary: Update specific fields of a Suivi Administrative Step
      parameters:
      - in: path
        name: step_id
        schema:
          type: integer
        required: true
      tags:
      - Suivi Administrative Management
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSuiviAdministrativeStepUpdateRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Step updated successfully.
        '404':
          description: Step not found.
  /suivi-administrative/steps/comments/:
    post:
      operationId: add_suivi_administrative_step_comment
      description: Add a comment to a specific administrative step, with an optional
        document upload.
      summary: Add a comment to a Suivi Administrative Step
      tags:
      - Suivi Administrative Management
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SuiviAdministrativeStepCommentCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SuiviAdministrativeStepCommentCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuiviAdministrativeStepComment'
          description: Comment created successfully.
        '400':
          description: Validation error.
  /suivi-administrative/steps/documents/{step_document_id}/delete/:
    delete:
      operationId: delete_suivi_administrative_step_document
      description: Allows users to delete a specific document by document ID from
        a Suivi Administrative Step.
      summary: Delete a document from a Suivi Administrative Step
      parameters:
      - in: path
        name: step_document_id
        schema:
          type: integer
        required: true
      tags:
      - Suivi Administrative Management
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Document deleted successfully.
        '404':
          description: Document not found.
        '400':
          description: Validation error.
  /suivi-administrative/steps/documents/{step_document_id}/update/:
    put:
      operationId: update_suivi_administrative_step_document
      description: Allows users to update a document for a specific Suivi Administrative
        Step by document ID.
      summary: Update a document in a Suivi Administrative Step
      parameters:
      - in: path
        name: step_document_id
        schema:
          type: integer
        required: true
      tags:
      - Suivi Administrative Management
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentUploadRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepDocument'
          description: ''
        '400':
          description: Validation error.
        '404':
          description: Document not found.
  /token_refresh/:
    post:
      operationId: token_refresh_create
      description: Endpoint to refresh access token
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Success:
                  value:
                    access: string
                  description: Successfully refreshed token
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                Unauthorized:
                  value:
                    detail: Token is invalid or expired
                  description: Invalid or expired token
          description: ''
  /user/change-password/:
    post:
      operationId: user_change_password_create
      description: Allows authenticated users to change their password by providing
        the old and new passwords.
      summary: Change Password
      tags:
      - User Profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserChangePasswordRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserChangePasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserChangePasswordRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /user/confirm-email-change/:
    post:
      operationId: user_confirm_email_change_create
      description: Processes a request to confirm an email change through a provided
        JWT token. The token should be sent as part of the request data.
      summary: Confirm Email Change
      tags:
      - User Profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEmailChangeConfirmRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserEmailChangeConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserEmailChangeConfirmRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email updated successfully.
                  new_email:
                    type: string
                    example: user@example.com
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid token or other specific error message.
          description: ''
  /user/profile/:
    get:
      operationId: user_profile_retrieve
      description: Returns the user's profile details.
      summary: Get User Profile
      tags:
      - User Profile
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /user/request-change-email/:
    post:
      operationId: user_request_change_email_create
      description: Allows authenticated users to request an email change. This sends
        a confirmation link to the new email address.
      summary: Request Email Change
      tags:
      - User Profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEmailChangeRequestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserEmailChangeRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserEmailChangeRequestRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Confirmation link sent to the new email.
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Invalid data provided or email already in use.
          description: ''
  /user/update/:
    patch:
      operationId: user_update_partial_update
      description: Updates the user's profile details.
      summary: Update User Profile
      tags:
      - User Profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdateRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /user/update-avatar/:
    post:
      operationId: user_update_avatar_create
      description: Upload or update the user's avatar.
      tags:
      - User Profile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AvatarUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Success:
                  value:
                    message: Avatar updated successfully!
                  description: Successfully updated the avatar
          description: ''
components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        street_number:
          type: string
          title: Numéro de la rue
          maxLength: 10
        street_name:
          type: string
          title: Nom de la rue
          maxLength: 255
        postal_code:
          type: string
          title: Code postal
          maxLength: 5
        city:
          type: string
          title: Ville
          maxLength: 100
        department:
          type: string
          nullable: true
          title: Département
          maxLength: 100
        region:
          type: string
          nullable: true
          title: Région
          maxLength: 100
        country:
          type: string
          title: Pays
          maxLength: 100
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - city
      - created_at
      - created_by
      - id
      - postal_code
      - street_name
      - street_number
      - updated_at
    AddressCreateRequest:
      type: object
      properties:
        street_number:
          type: string
          minLength: 1
          title: Numéro de la rue
          maxLength: 10
        street_name:
          type: string
          minLength: 1
          title: Nom de la rue
          maxLength: 255
        postal_code:
          type: string
          minLength: 1
          title: Code postal
          maxLength: 5
        city:
          type: string
          minLength: 1
          title: Ville
          maxLength: 100
        department:
          type: string
          nullable: true
          title: Département
          maxLength: 100
        region:
          type: string
          nullable: true
          title: Région
          maxLength: 100
        country:
          type: string
          minLength: 1
          title: Pays
          maxLength: 100
      required:
      - city
      - postal_code
      - street_name
      - street_number
    AdminStaff:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - created_by
      - id
      - updated_at
      - user
    AdminStaffCreateRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserCreateRequest'
      required:
      - user
    AvatarUpdateRequest:
      type: object
      properties:
        avatar:
          type: string
          format: binary
      required:
      - avatar
    BlankEnum:
      enum:
      - ''
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
          readOnly: true
        description:
          type: string
          nullable: true
          maxLength: 255
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - created_by
      - id
      - name
      - products
      - updated_at
    CategoryRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
      required:
      - name
    ChannelEnum:
      enum:
      - Email
      - sms
      - whatsApp
      - push
      - in_app
      type: string
      description: |-
        * `Email` - Email
        * `sms` - sms
        * `whatsApp` - WhatsApp
        * `push` - Push Notification
        * `in_app` - In-App Notification
    Client:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom de l'entreprise
          maxLength: 255
        siren_number:
          type: string
          title: Numéro SIREN
          maxLength: 9
        address:
          $ref: '#/components/schemas/Address'
        owner:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        contact_email:
          type: string
          format: email
          title: Email de contact
          maxLength: 254
        phone_number:
          type: string
          title: Numéro de téléphone
          maxLength: 20
        is_active:
          type: boolean
          title: Est actif
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - address
      - contact_email
      - created_at
      - created_by
      - id
      - name
      - owner
      - phone_number
      - siren_number
      - updated_at
    ClientCreateUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          title: Nom de l'entreprise
          maxLength: 255
        siren_number:
          type: string
          minLength: 1
          title: Numéro SIREN
          maxLength: 9
        address:
          $ref: '#/components/schemas/AddressCreateRequest'
        contact_email:
          type: string
          format: email
          minLength: 1
          title: Email de contact
          maxLength: 254
        phone_number:
          type: string
          minLength: 1
          title: Numéro de téléphone
          maxLength: 20
        is_active:
          type: boolean
          title: Est actif
      required:
      - address
      - contact_email
      - name
      - phone_number
      - siren_number
    ClientOwnerCreateRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserCreateRequest'
      required:
      - user
    ClientOwnerUpdateRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserUpdateRequest'
      required:
      - user
    ClientSimple:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom de l'entreprise
          maxLength: 255
        siren_number:
          type: string
          title: Numéro SIREN
          maxLength: 9
        contact_email:
          type: string
          format: email
          title: Email de contact
          maxLength: 254
        phone_number:
          type: string
          title: Numéro de téléphone
          maxLength: 20
      required:
      - contact_email
      - id
      - name
      - phone_number
      - siren_number
    ClientStaff:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - created_by
      - id
      - updated_at
      - user
    ClientStaffCreateRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserCreateRequest'
        client_id:
          type: integer
          nullable: true
      required:
      - user
    ClientStaffSimple:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserSimple'
          readOnly: true
      required:
      - id
      - user
    ClientStaffUpdateRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserUpdateRequest'
      required:
      - user
    Contact:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          title: Prénom
          maxLength: 100
        last_name:
          type: string
          title: Nom
          maxLength: 100
        email:
          type: string
          format: email
          maxLength: 254
        phone_numbers:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumber'
          readOnly: true
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - created_by
      - email
      - first_name
      - id
      - last_name
      - phone_numbers
      - updated_at
    ContactCreateUpdateRequest:
      type: object
      properties:
        first_name:
          type: string
          minLength: 1
          title: Prénom
          maxLength: 100
        last_name:
          type: string
          minLength: 1
          title: Nom
          maxLength: 100
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
      required:
      - email
      - first_name
      - last_name
    ContactUsEmailRequest:
      type: object
      properties:
        nom:
          type: string
          minLength: 1
          maxLength: 100
        prenom:
          type: string
          minLength: 1
          maxLength: 100
        telephone:
          type: string
          minLength: 1
          maxLength: 15
        email:
          type: string
          format: email
          minLength: 1
        fonction:
          type: string
          minLength: 1
          maxLength: 100
        entreprise:
          type: string
          minLength: 1
          maxLength: 100
        message:
          type: string
      required:
      - email
      - entreprise
      - fonction
      - nom
      - prenom
      - telephone
    CreatedBy:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        avatar:
          type: string
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
      required:
      - avatar
      - email
      - id
    CreatedByRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
      required:
      - email
    DiffusionIntervenantComment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        comment:
          type: string
          nullable: true
        document:
          allOf:
          - $ref: '#/components/schemas/Document'
          readOnly: true
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status7c6Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        created_by:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - document
      - id
    DiffusionIntervenantCommentCreateRequest:
      type: object
      properties:
        document_diffusion_id:
          type: integer
          description: ID of the document diffusion to comment on.
        comment:
          type: string
          minLength: 1
          description: Text content of the comment.
        document_file:
          type: string
          format: binary
          description: The file to be uploaded.
        status:
          $ref: '#/components/schemas/Status7c6Enum'
      required:
      - comment
      - document_diffusion_id
    Document:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        tags:
          type: string
          nullable: true
          maxLength: 255
        latest_version:
          allOf:
          - $ref: '#/components/schemas/DocumentVersion'
          readOnly: true
      required:
      - id
      - latest_version
      - name
    DocumentDiffusion:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        phase:
          $ref: '#/components/schemas/PhaseEnum'
        diffusion_date:
          type: string
          format: date
          nullable: true
        indice:
          type: string
          nullable: true
          maxLength: 100
        type:
          $ref: '#/components/schemas/Type474Enum'
        localisation:
          $ref: '#/components/schemas/Localisation'
        project_lot:
          $ref: '#/components/schemas/ProjectLot'
        document:
          allOf:
          - $ref: '#/components/schemas/Document'
          readOnly: true
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - created_by
      - document
      - id
      - localisation
      - phase
      - project_lot
      - title
      - type
      - updated_at
    DocumentDiffusionConfig:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        type:
          $ref: '#/components/schemas/Type474Enum'
        role:
          $ref: '#/components/schemas/RoleEnum'
        project:
          type: integer
          nullable: true
      required:
      - id
      - project
      - role
      - type
    DocumentDiffusionConfigRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/Type474Enum'
        role:
          $ref: '#/components/schemas/RoleEnum'
        project:
          type: integer
          nullable: true
      required:
      - project
      - role
      - type
    DocumentDiffusionCreateRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        phase:
          $ref: '#/components/schemas/PhaseEnum'
        type:
          $ref: '#/components/schemas/Type474Enum'
        localisation:
          type: integer
        project_lot:
          type: integer
      required:
      - localisation
      - phase
      - project_lot
      - title
      - type
    DocumentDiffusionUpdateRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        phase:
          $ref: '#/components/schemas/PhaseEnum'
        localisation:
          type: integer
      required:
      - localisation
      - phase
      - title
    DocumentUploadRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        file:
          type: string
          format: binary
        tags:
          type: string
          maxLength: 255
        notes:
          type: string
      required:
      - file
    DocumentVersion:
      type: object
      properties:
        version_number:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        file_url:
          type: string
          readOnly: true
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - file_url
      - version_number
    EmailTemplate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: Template name for internal reference
          maxLength: 255
        subject_template:
          type: string
          description: Subject template with placeholders
          maxLength: 255
        header_template:
          type: string
          nullable: true
          description: Customizable header content with placeholders
        body_template:
          type: string
          description: Customizable body content with placeholders
        footer_template:
          type: string
          nullable: true
          description: Customizable footer content with placeholders
      required:
      - body_template
      - id
      - name
      - subject_template
    EmailTemplateUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          description: Template name for internal reference
          maxLength: 255
        subject_template:
          type: string
          minLength: 1
          description: Subject template with placeholders
          maxLength: 255
        header_template:
          type: string
          nullable: true
          description: Customizable header content with placeholders
        body_template:
          type: string
          minLength: 1
          description: Customizable body content with placeholders
        footer_template:
          type: string
          nullable: true
          description: Customizable footer content with placeholders
      required:
      - body_template
      - name
      - subject_template
    Folder:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'
          readOnly: true
      required:
      - documents
      - id
      - name
    InAppNotification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        subject:
          type: string
          nullable: true
          maxLength: 255
        message:
          type: string
        status:
          $ref: '#/components/schemas/InAppNotificationStatusEnum'
        channel:
          $ref: '#/components/schemas/ChannelEnum'
        sent_at:
          type: string
          format: date-time
          nullable: true
        read_at:
          type: string
          format: date-time
          nullable: true
        redirect_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        context_data:
          nullable: true
      required:
      - channel
      - id
      - message
    InAppNotificationStatusEnum:
      enum:
      - pending
      - Sent
      - Failed
      - read
      - unread
      type: string
      description: |-
        * `pending` - Pending
        * `Sent` - Sent
        * `Failed` - Failed
        * `read` - Read
        * `unread` - unread
    IntervenantCreateRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserCreateRequest'
        role:
          $ref: '#/components/schemas/RoleEnum'
      required:
      - role
      - user
    IntervenantUpdateRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserUpdateRequest'
        role:
          $ref: '#/components/schemas/RoleEnum'
      required:
      - role
      - user
    Localisation:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - created_by
      - id
      - name
      - updated_at
    LocalisationRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
      required:
      - name
    Lot:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        client:
          allOf:
          - $ref: '#/components/schemas/Client'
          readOnly: true
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - client
      - created_at
      - created_by
      - id
      - name
      - updated_at
    LotCreateUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
      required:
      - name
    LotSimple:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - id
      - name
    MapCoordinate:
      type: object
      properties:
        latitude:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,6})?$
        longitude:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,6})?$
      required:
      - latitude
      - longitude
    MapCoordinateCreateOrUpdateRequest:
      type: object
      properties:
        latitude:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,6})?$
        longitude:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,6})?$
      required:
      - latitude
      - longitude
    NullEnum:
      enum:
      - null
    PaginatedAdminStaff:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/AdminStaff'
      required:
      - count
      - next
      - previous
      - results
    PaginatedCategory:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/Category'
      required:
      - count
      - next
      - previous
      - results
    PaginatedClient:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/Client'
      required:
      - count
      - next
      - previous
      - results
    PaginatedClientStaff:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/ClientStaff'
      required:
      - count
      - next
      - previous
      - results
    PaginatedDocumentDiffusion:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/DocumentDiffusion'
      required:
      - count
      - next
      - previous
      - results
    PaginatedDocumentDiffusionConfig:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/DocumentDiffusionConfig'
      required:
      - count
      - next
      - previous
      - results
    PaginatedInAppNotification:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/InAppNotification'
      required:
      - count
      - next
      - previous
      - results
    PaginatedLocalisation:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/Localisation'
      required:
      - count
      - next
      - previous
      - results
    PaginatedLot:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/Lot'
      required:
      - count
      - next
      - previous
      - results
    PaginatedPhoneNumber:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumber'
      required:
      - count
      - next
      - previous
      - results
    PaginatedProduct:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
      required:
      - count
      - next
      - previous
      - results
    PaginatedProject:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/Project'
      required:
      - count
      - next
      - previous
      - results
    PaginatedProjectIntervenant:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProjectIntervenant'
      required:
      - count
      - next
      - previous
      - results
    PaginatedProjectLot:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProjectLot'
      required:
      - count
      - next
      - previous
      - results
    PaginatedProjectLotSubcontractor:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProjectLotSubcontractor'
      required:
      - count
      - next
      - previous
      - results
    PaginatedProjectStaff:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProjectStaff'
      required:
      - count
      - next
      - previous
      - results
    PaginatedProjectSubcontractor:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProjectSubcontractor'
      required:
      - count
      - next
      - previous
      - results
    PaginatedSubcontractorStaff:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/SubcontractorStaff'
      required:
      - count
      - next
      - previous
      - results
    PaginatedSubcontractort:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/Subcontractor'
      required:
      - count
      - next
      - previous
      - results
    PaginatedSuiviAdministrative:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/SuiviAdministrative'
      required:
      - count
      - next
      - previous
      - results
    PaginatedSuiviAdministrativeIntervenant:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/SuiviAdministrativeIntervenant'
      required:
      - count
      - next
      - previous
      - results
    PaginatedSuiviAdministrativeStepComment:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/SuiviAdministrativeStepComment'
      required:
      - count
      - next
      - previous
      - results
    PasswordResetRequestRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
        redirect_uri:
          type: string
          minLength: 1
      required:
      - email
      - redirect_uri
    PatchedAdminStaffUpdateRequest:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        is_active:
          type: boolean
          title: Active
    PatchedSubcontractorStaffUpdateRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserUpdateRequest'
    PatchedSuiviAdministrativeStepUpdateRequest:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/Status3bfEnum'
          description: |-
            Optional status to update for the step.

            * `not_started` - Not Started
            * `in_progress` - In Progress
            * `completed` - Completed
            * `on_hold` - On Hold
            * `canceled` - Canceled
            * `rejected` - Rejected
            * `temporarily_done` - Temporarily Done
        nbr_of_days:
          type: integer
          minimum: 1
          description: Number of days, must be a positive integer.
    PatchedUserProfileUpdateRequest:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
    PhaseEnum:
      enum:
      - design
      - execution
      type: string
      description: |-
        * `design` - Design
        * `execution` - Execution
    PhoneNumber:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        number:
          type: string
          title: Numéro de téléphone
          maxLength: 20
        type:
          $ref: '#/components/schemas/TypeB5bEnum'
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - created_by
      - id
      - number
      - updated_at
    PhoneNumberCreateUpdateRequest:
      type: object
      properties:
        number:
          type: string
          minLength: 1
          title: Numéro de téléphone
          maxLength: 20
        type:
          $ref: '#/components/schemas/TypeB5bEnum'
      required:
      - number
      - type
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        category:
          type: integer
        technical_sheet:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        media:
          type: array
          items:
            $ref: '#/components/schemas/ProductMedia'
          readOnly: true
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - category
      - created_at
      - created_by
      - id
      - media
      - name
      - updated_at
    ProductMedia:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        image:
          type: string
          format: uri
        product:
          type: integer
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - created_by
      - id
      - image
      - product
      - updated_at
    ProductMediaRequest:
      type: object
      properties:
        image:
          type: string
          format: binary
        product:
          type: integer
      required:
      - image
      - product
    ProductRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        category:
          type: integer
        technical_sheet:
          type: string
          format: uri
          nullable: true
          maxLength: 200
      required:
      - category
      - name
    Project:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        code:
          type: string
          maxLength: 50
        name:
          type: string
          maxLength: 255
        description:
          type: string
        client:
          allOf:
          - $ref: '#/components/schemas/Client'
          readOnly: true
        status:
          $ref: '#/components/schemas/ProjectStatusEnum'
        start_date:
          type: string
          format: date
          nullable: true
        estimated_completion_date:
          type: string
          format: date
          nullable: true
        map_coordinate:
          allOf:
          - $ref: '#/components/schemas/MapCoordinate'
          readOnly: true
        percentage_complete:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
        budget:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
        actual_cost:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
        cost_variance:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
        risk_level:
          $ref: '#/components/schemas/RiskLevelEnum'
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          readOnly: true
        manager:
          allOf:
          - $ref: '#/components/schemas/ClientStaff'
          readOnly: true
        notification_frequency:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        max_notifications:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - address
      - client
      - code
      - created_at
      - created_by
      - id
      - manager
      - map_coordinate
      - name
      - updated_at
    ProjectCreateRequest:
      type: object
      properties:
        code:
          type: string
          minLength: 1
          maxLength: 50
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        client_id:
          type: integer
          nullable: true
        start_date:
          type: string
          format: date
          nullable: true
        budget:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
        address:
          $ref: '#/components/schemas/AddressCreateRequest'
        map_coordinate:
          $ref: '#/components/schemas/MapCoordinateCreateOrUpdateRequest'
        notes:
          type: string
      required:
      - code
      - name
    ProjectEmailTemplate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        project:
          $ref: '#/components/schemas/ProjectSimple'
        email_template:
          allOf:
          - $ref: '#/components/schemas/EmailTemplate'
          readOnly: true
        template_type:
          $ref: '#/components/schemas/TemplateTypeEnum'
      required:
      - email_template
      - id
      - project
      - template_type
    ProjectEmailTemplateUpdateRequest:
      type: object
      properties:
        email_template:
          $ref: '#/components/schemas/EmailTemplateUpdateRequest'
      required:
      - email_template
    ProjectIntervenant:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        code:
          type: string
          maxLength: 50
        name:
          type: string
          maxLength: 255
        description:
          type: string
        client:
          allOf:
          - $ref: '#/components/schemas/ClientSimple'
          readOnly: true
        map_coordinate:
          allOf:
          - $ref: '#/components/schemas/MapCoordinate'
          readOnly: true
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - address
      - client
      - code
      - created_at
      - id
      - map_coordinate
      - name
      - updated_at
    ProjectLot:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectSimple'
          readOnly: true
        lot:
          allOf:
          - $ref: '#/components/schemas/LotSimple'
          readOnly: true
        status:
          $ref: '#/components/schemas/Status109Enum'
        folder:
          allOf:
          - $ref: '#/components/schemas/Folder'
          readOnly: true
        notes:
          type: string
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - created_by
      - folder
      - id
      - lot
      - project
      - updated_at
    ProjectLotCreateRequest:
      type: object
      properties:
        lot_id:
          type: integer
        project_id:
          type: integer
      required:
      - lot_id
      - project_id
    ProjectLotSimple:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectSimple'
          readOnly: true
        lot:
          allOf:
          - $ref: '#/components/schemas/LotSimple'
          readOnly: true
        status:
          $ref: '#/components/schemas/Status109Enum'
        notes:
          type: string
      required:
      - id
      - lot
      - project
    ProjectLotSubcontractor:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        project_lot:
          allOf:
          - $ref: '#/components/schemas/ProjectLotSimple'
          readOnly: true
        subcontractor:
          allOf:
          - $ref: '#/components/schemas/SubcontractorSimple'
          readOnly: true
        subcontractor_staff:
          allOf:
          - $ref: '#/components/schemas/SubcontractorStaffSimple'
          readOnly: true
        devis_document:
          allOf:
          - $ref: '#/components/schemas/Document'
          readOnly: true
        status:
          $ref: '#/components/schemas/Status841Enum'
        notes:
          type: string
          nullable: true
        notifications_sent:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        last_notification_date:
          type: string
          format: date-time
          nullable: true
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - created_by
      - devis_document
      - id
      - project_lot
      - subcontractor
      - subcontractor_staff
      - updated_at
    ProjectLotSubcontractorCreateRequest:
      type: object
      properties:
        subcontractor_id:
          type: integer
        subcontractor_staff_id:
          type: integer
        status:
          $ref: '#/components/schemas/Status841Enum'
        notes:
          type: string
          nullable: true
      required:
      - subcontractor_id
      - subcontractor_staff_id
    ProjectLotSubcontractorUpdateRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status841Enum'
    ProjectLotUpdateRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status109Enum'
    ProjectSimple:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        client:
          allOf:
          - $ref: '#/components/schemas/ClientSimple'
          readOnly: true
      required:
      - client
      - id
      - name
    ProjectStaff:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        staff:
          allOf:
          - $ref: '#/components/schemas/ClientStaffSimple'
          readOnly: true
        role:
          type: string
          maxLength: 100
        supervisor:
          allOf:
          - $ref: '#/components/schemas/ClientStaffSimple'
          readOnly: true
          nullable: true
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - created_by
      - id
      - role
      - staff
      - supervisor
      - updated_at
    ProjectStaffAssignRequest:
      type: object
      properties:
        staff_id:
          type: integer
        role:
          type: string
          minLength: 1
          maxLength: 100
        supervisor_id:
          type: integer
          nullable: true
      required:
      - role
      - staff_id
    ProjectStaffReorderRequest:
      type: object
      properties:
        id:
          type: integer
        supervisor_id:
          type: integer
          nullable: true
        children:
          type: array
          items:
            type: object
            additionalProperties: {}
      required:
      - id
    ProjectStaffTree:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        staff:
          allOf:
          - $ref: '#/components/schemas/ClientStaffSimple'
          readOnly: true
        role:
          type: string
          maxLength: 100
        children:
          type: string
          readOnly: true
      required:
      - children
      - id
      - role
      - staff
    ProjectStaffUpdateRequest:
      type: object
      properties:
        role:
          type: string
          minLength: 1
          maxLength: 100
        supervisor_id:
          type: integer
          nullable: true
    ProjectStatusEnum:
      enum:
      - draft
      - pending
      - in_progress
      - completed
      - on_hold
      - canceled
      type: string
      description: |-
        * `draft` - Draft
        * `pending` - Pending
        * `in_progress` - In Progress
        * `completed` - Completed
        * `on_hold` - On Hold
        * `canceled` - Canceled
    ProjectSubcontractor:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        code:
          type: string
          maxLength: 50
        name:
          type: string
          maxLength: 255
        description:
          type: string
        client:
          allOf:
          - $ref: '#/components/schemas/ClientSimple'
          readOnly: true
        map_coordinate:
          allOf:
          - $ref: '#/components/schemas/MapCoordinate'
          readOnly: true
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          readOnly: true
        manager:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - address
      - client
      - code
      - created_at
      - id
      - map_coordinate
      - name
      - updated_at
    ProjectUpdateRequest:
      type: object
      properties:
        code:
          type: string
          minLength: 1
          maxLength: 50
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        start_date:
          type: string
          format: date
          nullable: true
        budget:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
        address:
          $ref: '#/components/schemas/AddressCreateRequest'
        map_coordinate:
          $ref: '#/components/schemas/MapCoordinateCreateOrUpdateRequest'
        notes:
          type: string
        notification_frequency:
          type: integer
          nullable: true
        max_notifications:
          type: integer
          nullable: true
      required:
      - address
      - code
      - map_coordinate
      - name
    RiskLevelEnum:
      enum:
      - low
      - medium
      - high
      - critical
      type: string
      description: |-
        * `low` - Low
        * `medium` - Medium
        * `high` - High
        * `critical` - Critical
    RoleEnum:
      enum:
      - Architecte
      - Bureau de contrôle
      - Bureau d'étude technique
      - Coordonnateur sécurité et protection de la santé
      - Assistance maîtrise d’ouvrage hygiène et environnement
      - Client
      type: string
      description: |-
        * `Architecte` - Architecte
        * `Bureau de contrôle` - Bureau de contrôle
        * `Bureau d'étude technique` - Bureau d'étude technique
        * `Coordonnateur sécurité et protection de la santé` - Coordonnateur sécurité et protection de la santé
        * `Assistance maîtrise d’ouvrage hygiène et environnement` - Assistance maîtrise d’ouvrage hygiène et environnement
        * `Client` - Client
    SetNewPasswordRequest:
      type: object
      properties:
        new_password:
          type: string
          writeOnly: true
          minLength: 1
        uid:
          type: string
          writeOnly: true
          minLength: 1
        token:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - new_password
      - token
      - uid
    SetasswordRequest:
      type: object
      properties:
        new_password:
          type: string
          writeOnly: true
          minLength: 1
        uid:
          type: string
          writeOnly: true
          minLength: 1
        token:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - new_password
      - token
      - uid
    Status109Enum:
      enum:
      - pending
      - in_progress
      - review
      - completed
      - canceled
      type: string
      description: |-
        * `pending` - Pending
        * `in_progress` - In Progress
        * `review` - Under Review
        * `completed` - Completed
        * `canceled` - Canceled
    Status3bfEnum:
      enum:
      - not_started
      - in_progress
      - completed
      - on_hold
      - canceled
      - rejected
      - temporarily_done
      type: string
      description: |-
        * `not_started` - Not Started
        * `in_progress` - In Progress
        * `completed` - Completed
        * `on_hold` - On Hold
        * `canceled` - Canceled
        * `rejected` - Rejected
        * `temporarily_done` - Temporarily Done
    Status7c6Enum:
      enum:
      - valid
      - invalid
      - not_validated_yet
      type: string
      description: |-
        * `valid` - Valid
        * `invalid` - Invalid
        * `not_validated_yet` - Not Validated Yet
    Status841Enum:
      enum:
      - pending
      - in_progress
      - completed
      - not_responding
      - canceled
      type: string
      description: |-
        * `pending` - Pending
        * `in_progress` - In Progress
        * `completed` - Completed
        * `not_responding` - Not Responding
        * `canceled` - Canceled
    StepDocument:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        document:
          allOf:
          - $ref: '#/components/schemas/Document'
          readOnly: true
        is_valid:
          type: boolean
          description: Whether the document is valid for this step.
        protected:
          type: boolean
          description: If True, this document cannot be updated or deleted in the
            current step.
      required:
      - document
      - id
    Subcontractor:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom de l'entreprise
          maxLength: 255
        siren_number:
          type: string
          title: Numéro SIREN
          maxLength: 9
        address:
          $ref: '#/components/schemas/Address'
        contact_email:
          type: string
          format: email
          title: Email de contact
          maxLength: 254
        clients:
          type: array
          items:
            $ref: '#/components/schemas/Client'
          readOnly: true
        phone_number:
          type: string
          title: Numéro de téléphone
          maxLength: 20
        owner:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        is_active:
          type: boolean
          title: Est actif
        lots:
          type: array
          items:
            $ref: '#/components/schemas/LotSimple'
          readOnly: true
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - address
      - clients
      - contact_email
      - created_at
      - created_by
      - id
      - lots
      - name
      - owner
      - phone_number
      - siren_number
      - updated_at
    SubcontractorCreateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          title: Nom de l'entreprise
          maxLength: 255
        siren_number:
          type: string
          minLength: 1
          title: Numéro SIREN
          maxLength: 9
        address:
          $ref: '#/components/schemas/AddressCreateRequest'
        contact_email:
          type: string
          format: email
          minLength: 1
          title: Email de contact
          maxLength: 254
        phone_number:
          type: string
          minLength: 1
          title: Numéro de téléphone
          maxLength: 20
        is_active:
          type: boolean
          title: Est actif
        lots_ids:
          type: array
          items:
            type: integer
          nullable: true
        client_id:
          type: integer
          nullable: true
      required:
      - address
      - contact_email
      - name
      - phone_number
      - siren_number
    SubcontractorOwnerCreateRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserCreateRequest'
      required:
      - user
    SubcontractorOwnerUpdateRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserUpdateRequest'
      required:
      - user
    SubcontractorSimple:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nom de l'entreprise
          maxLength: 255
        siren_number:
          type: string
          title: Numéro SIREN
          maxLength: 9
      required:
      - id
      - name
      - siren_number
    SubcontractorStaff:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - created_by
      - id
      - updated_at
      - user
    SubcontractorStaffCreateRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserCreateRequest'
      required:
      - user
    SubcontractorStaffSimple:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        subcontractor:
          allOf:
          - $ref: '#/components/schemas/SubcontractorSimple'
          readOnly: true
      required:
      - id
      - subcontractor
      - user
    SubcontractorUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          title: Nom de l'entreprise
          maxLength: 255
        siren_number:
          type: string
          minLength: 1
          title: Numéro SIREN
          maxLength: 9
        address:
          $ref: '#/components/schemas/AddressCreateRequest'
        contact_email:
          type: string
          format: email
          minLength: 1
          title: Email de contact
          maxLength: 254
        phone_number:
          type: string
          minLength: 1
          title: Numéro de téléphone
          maxLength: 20
        is_active:
          type: boolean
          title: Est actif
        lots_ids:
          type: array
          items:
            type: integer
          nullable: true
      required:
      - address
      - contact_email
      - name
      - phone_number
      - siren_number
    SuiviAdministrative:
      type: object
      description: Serializer for the overall suivi administrative process.
      properties:
        id:
          type: integer
          readOnly: true
        project_lot:
          allOf:
          - $ref: '#/components/schemas/ProjectLot'
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/SuiviAdministrativeStatusEnum'
          description: |-
            Overall status of the administrative process.

            * `not_started` - Not Started
            * `in_progress` - In Progress
            * `completed` - Completed
        steps:
          type: array
          items:
            $ref: '#/components/schemas/SuiviAdministrativeStep'
          readOnly: true
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - created_by
      - id
      - project_lot
      - steps
      - updated_at
    SuiviAdministrativeIntervenant:
      type: object
      description: Serializer for the overall suivi administrative process.
      properties:
        id:
          type: integer
          readOnly: true
        project_lot:
          allOf:
          - $ref: '#/components/schemas/ProjectLotSimple'
          readOnly: true
        steps:
          type: string
          readOnly: true
      required:
      - id
      - project_lot
      - steps
    SuiviAdministrativeStatusEnum:
      enum:
      - not_started
      - in_progress
      - completed
      type: string
      description: |-
        * `not_started` - Not Started
        * `in_progress` - In Progress
        * `completed` - Completed
    SuiviAdministrativeStep:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        step_name:
          type: string
          maxLength: 255
        step_documents:
          type: array
          items:
            $ref: '#/components/schemas/StepDocument'
          readOnly: true
        order:
          type: integer
          maximum: 2147483647
          minimum: 0
        nbr_of_days:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          description: Number of days before or after the project start date.
        target_date:
          type: string
          format: date
          nullable: true
        actual_date:
          type: string
          format: date
          nullable: true
        status:
          allOf:
          - $ref: '#/components/schemas/Status3bfEnum'
          description: |-
            Status of the step in the suivi administrative process.

            * `not_started` - Not Started
            * `in_progress` - In Progress
            * `completed` - Completed
            * `on_hold` - On Hold
            * `canceled` - Canceled
            * `rejected` - Rejected
            * `temporarily_done` - Temporarily Done
        assigned_to:
          allOf:
          - $ref: '#/components/schemas/ProjectIntervenant'
          readOnly: true
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - assigned_to
      - created_at
      - created_by
      - id
      - nbr_of_days
      - step_documents
      - step_name
      - updated_at
    SuiviAdministrativeStepComment:
      type: object
      description: Serializer for listing comments with details about the attached
        document.
      properties:
        id:
          type: integer
          readOnly: true
        comment:
          type: string
          description: The content of the comment.
        document:
          allOf:
          - $ref: '#/components/schemas/Document'
          readOnly: true
        status:
          nullable: true
          description: |-
            Optional status update for the step when this comment is created.

            * `not_started` - Not Started
            * `in_progress` - In Progress
            * `completed` - Completed
            * `on_hold` - On Hold
            * `canceled` - Canceled
            * `rejected` - Rejected
            * `temporarily_done` - Temporarily Done
          oneOf:
          - $ref: '#/components/schemas/Status3bfEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        created_by:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - comment
      - created_at
      - document
      - id
    SuiviAdministrativeStepCommentCreateRequest:
      type: object
      description: Serializer for creating comments with optional document uploads.
      properties:
        step_id:
          type: integer
          description: ID of the step to comment on.
        comment:
          type: string
          minLength: 1
          description: Text content of the comment.
        document_file:
          type: string
          format: binary
          description: The file to be uploaded.
        status:
          allOf:
          - $ref: '#/components/schemas/Status3bfEnum'
          description: |-
            Optional status to update for the step.

            * `not_started` - Not Started
            * `in_progress` - In Progress
            * `completed` - Completed
            * `on_hold` - On Hold
            * `canceled` - Canceled
            * `rejected` - Rejected
            * `temporarily_done` - Temporarily Done
      required:
      - comment
      - step_id
    TemplateTypeEnum:
      enum:
      - upload_devis
      - assign_subcontractor
      - update_document
      - rappel_client
      - rappel_subcontractor
      type: string
      description: |-
        * `upload_devis` - Upload Devis
        * `assign_subcontractor` - Assign Subcontractor
        * `update_document` - Update Document
        * `rappel_client` - Rappel Client
        * `rappel_subcontractor` - Rappel Subcontractor
    TokenObtainPairRequest:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
      required:
      - refresh
    Type474Enum:
      enum:
      - plan_technique
      - plan_de_coffrage
      - fiche_technique
      - avis_technique
      - note_de_calcul
      - fiche_question
      - autre
      type: string
      description: |-
        * `plan_technique` - Plan Technique
        * `plan_de_coffrage` - Plan de Coffrage
        * `fiche_technique` - Fiche Technique
        * `avis_technique` - Avis Technique
        * `note_de_calcul` - Note de Calcul
        * `fiche_question` - Fiche Question
        * `autre` - Autre
    TypeB5bEnum:
      enum:
      - work
      - personal
      - fax
      type: string
      description: |-
        * `work` - Work
        * `personal` - Personal
        * `fax` - Fax
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        avatar:
          type: string
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        date_joined:
          type: string
          format: date-time
        is_active:
          type: boolean
          title: Active
        role:
          type: string
          readOnly: true
      required:
      - avatar
      - email
      - id
      - role
    UserChangePasswordRequest:
      type: object
      properties:
        old_password:
          type: string
          minLength: 1
        new_password:
          type: string
          minLength: 1
      required:
      - new_password
      - old_password
    UserCreateRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        is_active:
          type: boolean
          title: Active
        redirect_uri:
          type: string
          format: uri
          writeOnly: true
          minLength: 1
      required:
      - email
      - first_name
      - last_name
      - redirect_uri
    UserEmailChangeConfirmRequest:
      type: object
      properties:
        token:
          type: string
          minLength: 1
      required:
      - token
    UserEmailChangeRequestRequest:
      type: object
      properties:
        new_email:
          type: string
          format: email
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
        redirect_uri:
          type: string
          format: uri
          minLength: 1
      required:
      - new_email
      - password
      - redirect_uri
    UserSimple:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        avatar:
          type: string
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
      required:
      - avatar
      - email
      - id
    UserUpdateRequest:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        is_active:
          type: boolean
          title: Active
      required:
      - first_name
      - last_name
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
